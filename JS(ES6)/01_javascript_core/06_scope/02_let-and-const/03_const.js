/* 03. const(상수) */
/* let 키워드와 마찬가지로 블록 레벨 스코프를 가지며 중복 선언 방지 및 변수 호이스팅을 발생하지 않는 것처럼 동작한다. */

/* 상수는 선언과 동시에 초기화 해 주어야 한다. */
// const x;                        // Missing initializer in const declaration
const x = 1;

// x = 2;                          // Assignment to constant variable.(값 재할당 금지(상수))    

/* 
    일반적으로 함수의 이름은 대문자로 선언해서 상수임을 명확히 하며 여러 단어로 이루어진 경우 언더스코어(_)를 활용한
    스네이크 케이스로 표현하는 것이 일반적이다.
*/

/* 할인율은 변경할 수 없는 상수로써 사용 될 값이다. */
const DISCOUNT_RATE = 0.15;

let price = 15000;                                  // 정가

let discountPrice = price * (1 - DISCOUNT_RATE);    // 할인율이 적용 된 할인가
console.log(discountPrice);

/*
    ES6 이후라면 var 키워드를 사용하지 않는다.
    재할당이 필요한 경우에 한정해 let 키워드를 사용하며
    변경이 발생하지 않고 읽기 전용으로 사용하는 원시 값과 객체에는 const 키워드를 사용한다.
    const 키워드는 재활용을 금지하므로 var, let 키워드보다 안전하다.
*/

/*
    전역 변수의 문제점
    1. 모든 코드가 전역 변수를 참조하고 변경할 수 있게 되면 가독성은 나빠지고 의도치 않게 상태가 변경될 수 있는 위험성도 높아진다.
    2. 전역 변수는 생명주기가 길다. 메모리 리소스도 오래 소비하며 상태 변경이 가능한 시간과 기회가 많다.
    3. 스코프 체인 상에서 종점에 존재하므로 전역 변수의 검색 속도가 가장 느리다.

    => 변수의 스코프는 좁을수록 좋다.
*/